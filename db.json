{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/casper_indie/source/js/jquery.fitvids.js","path":"js/jquery.fitvids.js","modified":1},{"_id":"themes/casper_indie/source/js/index.js","path":"js/index.js","modified":1},{"_id":"themes/casper_indie/source/fonts/icons.woff","path":"fonts/icons.woff","modified":1},{"_id":"themes/casper_indie/source/fonts/icons.ttf","path":"fonts/icons.ttf","modified":1},{"_id":"themes/casper_indie/source/fonts/icons.svg","path":"fonts/icons.svg","modified":1},{"_id":"themes/casper_indie/source/fonts/icons.eot","path":"fonts/icons.eot","modified":1},{"_id":"themes/casper_indie/source/fonts/icons.dev.svg","path":"fonts/icons.dev.svg","modified":1},{"_id":"themes/casper_indie/source/css/screen.css","path":"css/screen.css","modified":1},{"_id":"themes/casper_indie/source/css/normalize.css","path":"css/normalize.css","modified":1}],"Cache":[{"_id":"source/_posts/Mongo-DB-Mongoose-Validate.md","shasum":"829bf33ae8f9046aa59cc87eaad7bd4e38a3b679","modified":1450945900000},{"_id":"source/_posts/how-to-setup.md","shasum":"ab6631627fd6c8cfc5904de75654c20e6ca7d2f0","modified":1450945891000},{"_id":"themes/casper_indie/LICENSE","shasum":"7bc66e9632b475079619f585722930b551c3c081","modified":1448158466000},{"_id":"themes/casper_indie/README.md","shasum":"8a50fc48959d4fbe71643174cf4792a5db45bb0c","modified":1448158466000},{"_id":"themes/casper_indie/_config.yml","shasum":"92915fc48c48f7fff522712b9baf8eff3a5b5837","modified":1448158466000},{"_id":"themes/casper_indie/layout/archive.ejs","shasum":"eaf7e49f416afce6685e36a24a65a01bb3fe9ae7","modified":1448158466000},{"_id":"themes/casper_indie/layout/casper/after_all.ejs","shasum":"e7cd492d5efe3186e22525d41176c5d5d6321e8c","modified":1448158466000},{"_id":"themes/casper_indie/layout/casper/footer.ejs","shasum":"1ebcfcb2305d34f1aba4501c0e2c7cd08049f8db","modified":1448158466000},{"_id":"themes/casper_indie/layout/casper/head.ejs","shasum":"46ee0f65de367690f057fcafa7ce7e9955206761","modified":1450948748000},{"_id":"themes/casper_indie/layout/casper/header.ejs","shasum":"f103e0d38c6412d1c5c47100ea7fbebcc2f990c5","modified":1448158466000},{"_id":"themes/casper_indie/layout/casper/index.ejs","shasum":"4dbc6044a87a0ccbad204e3c5719763d0bc4f440","modified":1448158466000},{"_id":"themes/casper_indie/layout/casper/post/author.ejs","shasum":"d7eb9e85d3bd514cdc03100c4b91f088ad92b539","modified":1448158466000},{"_id":"themes/casper_indie/layout/casper/post/comments.ejs","shasum":"66024ffeb7dcd21b6679c29ab4e78fb876d1d807","modified":1448158466000},{"_id":"themes/casper_indie/layout/casper/post/meta.ejs","shasum":"ba0bc4475c3bfde7e4c3e1bf3af912a012b93d93","modified":1450946914000},{"_id":"themes/casper_indie/layout/casper/post/navigation.ejs","shasum":"2ed662189bbc0d305147fdc12b9f120e57722ac5","modified":1448158466000},{"_id":"themes/casper_indie/layout/casper/post/share.ejs","shasum":"4e5b4e6f25a69646ed883f382f63fcfadc6d2735","modified":1450945653000},{"_id":"themes/casper_indie/layout/casper/post.ejs","shasum":"44e5a84f935e598d471fd34548ff27adc9704577","modified":1450945682000},{"_id":"themes/casper_indie/layout/category.ejs","shasum":"eaf7e49f416afce6685e36a24a65a01bb3fe9ae7","modified":1448158466000},{"_id":"themes/casper_indie/layout/index.ejs","shasum":"eaf7e49f416afce6685e36a24a65a01bb3fe9ae7","modified":1448158466000},{"_id":"themes/casper_indie/layout/layout.ejs","shasum":"e3c9598002a8c8bd991aa7f0373ff984b643044a","modified":1450948717000},{"_id":"themes/casper_indie/layout/page.ejs","shasum":"13a176d843e7d44921e2705203011f0fcb46fcda","modified":1448158466000},{"_id":"themes/casper_indie/layout/post.ejs","shasum":"13a176d843e7d44921e2705203011f0fcb46fcda","modified":1448158466000},{"_id":"themes/casper_indie/layout/tag.ejs","shasum":"eaf7e49f416afce6685e36a24a65a01bb3fe9ae7","modified":1448158466000},{"_id":"themes/casper_indie/source/css/normalize.css","shasum":"163c60d3a6c1f786754ba07426afbee0dfe82329","modified":1448158466000},{"_id":"themes/casper_indie/source/css/screen.css","shasum":"22e66bd689096a6eb398a15fcf7e4e38bd160e04","modified":1450947420000},{"_id":"themes/casper_indie/source/fonts/icons.dev.svg","shasum":"193cbbeadd27a72dadb809aa7344df5b9d965d8d","modified":1448158466000},{"_id":"themes/casper_indie/source/fonts/icons.eot","shasum":"d1abd4ac9fc6794570a73a5facaaf91492eed03c","modified":1448158466000},{"_id":"themes/casper_indie/source/fonts/icons.svg","shasum":"e8deb79bc630c3aa21ccdca71f6f6a43ca8035c1","modified":1448158466000},{"_id":"themes/casper_indie/source/fonts/icons.ttf","shasum":"e5247503ef56fd03361442ed082c8f9321e860b8","modified":1448158466000},{"_id":"themes/casper_indie/source/fonts/icons.woff","shasum":"31dc8eba4c3c2c799996658b01a5926267ae6af6","modified":1448158466000},{"_id":"themes/casper_indie/source/js/index.js","shasum":"a04c311b0818023c97446c79a8facdef067a04d1","modified":1448158466000},{"_id":"themes/casper_indie/source/js/jquery.fitvids.js","shasum":"0d9ee59f102516b1a988490f27ed37440713cc8b","modified":1448158466000},{"_id":"public/js/jquery.fitvids.js","modified":1450948776644,"shasum":"0d9ee59f102516b1a988490f27ed37440713cc8b"},{"_id":"public/js/index.js","modified":1450948776650,"shasum":"a04c311b0818023c97446c79a8facdef067a04d1"},{"_id":"public/fonts/icons.woff","modified":1450948776661,"shasum":"31dc8eba4c3c2c799996658b01a5926267ae6af6"},{"_id":"public/fonts/icons.ttf","modified":1450948776665,"shasum":"e5247503ef56fd03361442ed082c8f9321e860b8"},{"_id":"public/fonts/icons.svg","modified":1450948776668,"shasum":"e8deb79bc630c3aa21ccdca71f6f6a43ca8035c1"},{"_id":"public/fonts/icons.eot","modified":1450948776672,"shasum":"d1abd4ac9fc6794570a73a5facaaf91492eed03c"},{"_id":"public/fonts/icons.dev.svg","modified":1450948776676,"shasum":"193cbbeadd27a72dadb809aa7344df5b9d965d8d"},{"_id":"public/css/screen.css","modified":1450948776679,"shasum":"22e66bd689096a6eb398a15fcf7e4e38bd160e04"},{"_id":"public/css/normalize.css","modified":1450948776683,"shasum":"163c60d3a6c1f786754ba07426afbee0dfe82329"},{"_id":"public/2015/11/22/Mongo-DB-Mongoose-Validate/index.html","modified":1450948776708,"shasum":"35e3285384c3113caec3d7fdf988c572104fd94a"},{"_id":"public/2015/11/21/how-to-setup/index.html","modified":1450948776721,"shasum":"603fe6344f6ad35adf66f7466eeb1e75f9fce6a2"},{"_id":"public/archives/index.html","modified":1450948776732,"shasum":"b2129f69e8fc9571c1b86e762522b8dbbd3339c3"},{"_id":"public/archives/2015/index.html","modified":1450948776742,"shasum":"398322c369217fa1788acb074d215fb743c72ef8"},{"_id":"public/archives/2015/11/index.html","modified":1450948776750,"shasum":"2dbe372dc406c989e1423f860cc78a1bfe0c44ba"},{"_id":"public/index.html","modified":1450948776756,"shasum":"8be39f417a4fdbfac0abb6afdf4c95103faee5de"},{"_id":"public/tags/mongo/index.html","modified":1450948776766,"shasum":"00c0a738363d8d0f301d9543ec3c04618abadf58"},{"_id":"public/tags/hexo/index.html","modified":1450948776772,"shasum":"9037c51f55974e88a82f367399489948463268c5"}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Mongo DB Mongooseで非同期Validation","date":"2015-11-22T11:19:45.000Z","author":"tejitak","_content":"\nこんばんはtejitakです。今日からIndie Incのエンジニアブログを書き始めます！w\n\nMongoDBで定義したスキーマのデータを更新するときにvalidationを行うには以下のように行います。\n\n## 通常のvalidationを行う例\n\n``` js\n// schemaの定義と同時にvalidateを定義する場合\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema\n\nvar usernameLengthValidator = (value) => {\n  // 64文字以上はerror\n  return value.length < 64\n}\n\nvar User = new Schema({\n  \"username\": { type: String, default: '', validator: [{validator: usernameLengthValidator ,\n      message: '{VALUE} should be less than 64 characters!'}]}\n})\n\n// schemaの定義の後にvalidateを定義する場合\nUser.path('username').validate(usernameValidator, '{VALUE} should be less than 64 characters!')\n\n```\n\n通常は上記のような方法でvalidateすれば良いのですが、例えばtwitterのuserIdのようなものを想定してみてください。\n\nUserエントリをデータベースに更新する前に、重複IDが存在するかをDBの中から検索する必要があります。\n\nmongooseのfindのAPIは非同期のものしか提供されていないため、validationも非同期に行う必要があります。\n\n非同期validationは以下のコードのようにvalidateの関数の引数にcallbackを足して、処理の終了時にそれを呼んであげれば実現できます。\n\n## 非同期にvalidationを行う例\n``` js\n\n// callbackを引数に定義し、非同期処理が完了したタイミングでsuccessならtrue, failならfalseをcallbackに渡して実行する\nvar asyncValidator = (value, callback) => {\n  // Userデータの中に同じusernameが存在するかどうかをcount queryで判別する\n  return mongoose.model('User').where({'username': value}).count((err, count) => {\n    callback(count === 0, 'The username is already token!')\n  })\n}\n\nvar User = new Schema({\n  \"username\": { type: String, default: '', validator: [\n    {validator: usernameLengthValidator, message: '{VALUE} should be less than 64 characters!'},\n    {validator: asyncValidator , message: ''}\n  ]}\n})\n```\n\nこんな感じで実装できました。\n\n後で探してみると [mongoose-unique-validator](https://www.npmjs.com/package/mongoose-unique-validator) というツールもありました。このライブラリはmongooseのpluginを使って、上記と同様の countクエリーを発行しているようです。\n\n以上mongoDBに関するTips初投稿でした。\nこんな感じで些細なTipsなどを共有していこうかなと思っています。\n\nよろしくお願いします！\n","source":"_posts/Mongo-DB-Mongoose-Validate.md","raw":"title: Mongo DB Mongooseで非同期Validation\ndate: 2015-11-22 20:19:45\ntags: mongo\nauthor: tejitak\n---\n\nこんばんはtejitakです。今日からIndie Incのエンジニアブログを書き始めます！w\n\nMongoDBで定義したスキーマのデータを更新するときにvalidationを行うには以下のように行います。\n\n## 通常のvalidationを行う例\n\n``` js\n// schemaの定義と同時にvalidateを定義する場合\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema\n\nvar usernameLengthValidator = (value) => {\n  // 64文字以上はerror\n  return value.length < 64\n}\n\nvar User = new Schema({\n  \"username\": { type: String, default: '', validator: [{validator: usernameLengthValidator ,\n      message: '{VALUE} should be less than 64 characters!'}]}\n})\n\n// schemaの定義の後にvalidateを定義する場合\nUser.path('username').validate(usernameValidator, '{VALUE} should be less than 64 characters!')\n\n```\n\n通常は上記のような方法でvalidateすれば良いのですが、例えばtwitterのuserIdのようなものを想定してみてください。\n\nUserエントリをデータベースに更新する前に、重複IDが存在するかをDBの中から検索する必要があります。\n\nmongooseのfindのAPIは非同期のものしか提供されていないため、validationも非同期に行う必要があります。\n\n非同期validationは以下のコードのようにvalidateの関数の引数にcallbackを足して、処理の終了時にそれを呼んであげれば実現できます。\n\n## 非同期にvalidationを行う例\n``` js\n\n// callbackを引数に定義し、非同期処理が完了したタイミングでsuccessならtrue, failならfalseをcallbackに渡して実行する\nvar asyncValidator = (value, callback) => {\n  // Userデータの中に同じusernameが存在するかどうかをcount queryで判別する\n  return mongoose.model('User').where({'username': value}).count((err, count) => {\n    callback(count === 0, 'The username is already token!')\n  })\n}\n\nvar User = new Schema({\n  \"username\": { type: String, default: '', validator: [\n    {validator: usernameLengthValidator, message: '{VALUE} should be less than 64 characters!'},\n    {validator: asyncValidator , message: ''}\n  ]}\n})\n```\n\nこんな感じで実装できました。\n\n後で探してみると [mongoose-unique-validator](https://www.npmjs.com/package/mongoose-unique-validator) というツールもありました。このライブラリはmongooseのpluginを使って、上記と同様の countクエリーを発行しているようです。\n\n以上mongoDBに関するTips初投稿でした。\nこんな感じで些細なTipsなどを共有していこうかなと思っています。\n\nよろしくお願いします！\n","slug":"Mongo-DB-Mongoose-Validate","published":1,"updated":"2015-12-24T08:31:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciik1ft0o0000or7t7rflkwnt"},{"title":"How to Setup Hexo","date":"2015-11-21T14:26:55.000Z","author":"tejitak","_content":"\n### Installation\nPrerequisite: Node\n\n``` bash\n$ npm install -g hexo\n```\n\n### Setup Repository\n``` bash\n$ git clone https://github.com/Indie-Inc/indie-inc.github.io.git\n$ cd Indie-Inc.github.io.git\n$ npm install\n```\n\n### Write a Post\n\n``` bash\n$ hexo new “your xxxxx title\"\n```\n\nEdit the post in source/_posts/your-xxxxx-title.md\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Check on Local Hexo Server\n``` bash\n$ hexo server\n```\nAccess to [http://localhost:4000/](http://localhost:4000/)\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Deploy the Post\nDeploy with generating static files\n``` bash\n$ hexo deploy -g\n```\nMore info: [Generating](http://hexo.io/docs/generating.html), [Deployment](http://hexo.io/docs/deployment.html)\n\n### Push the Posts to Repository\n``` bash\n$ git push origin hexo\n```\n","source":"_posts/how-to-setup.md","raw":"title: How to Setup Hexo\ndate: 2015-11-21 23:26:55\ntags: hexo\nauthor: tejitak\n---\n\n### Installation\nPrerequisite: Node\n\n``` bash\n$ npm install -g hexo\n```\n\n### Setup Repository\n``` bash\n$ git clone https://github.com/Indie-Inc/indie-inc.github.io.git\n$ cd Indie-Inc.github.io.git\n$ npm install\n```\n\n### Write a Post\n\n``` bash\n$ hexo new “your xxxxx title\"\n```\n\nEdit the post in source/_posts/your-xxxxx-title.md\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Check on Local Hexo Server\n``` bash\n$ hexo server\n```\nAccess to [http://localhost:4000/](http://localhost:4000/)\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Deploy the Post\nDeploy with generating static files\n``` bash\n$ hexo deploy -g\n```\nMore info: [Generating](http://hexo.io/docs/generating.html), [Deployment](http://hexo.io/docs/deployment.html)\n\n### Push the Posts to Repository\n``` bash\n$ git push origin hexo\n```\n","slug":"how-to-setup","published":1,"updated":"2015-12-24T08:31:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciik1ft110003or7t1641qpxb"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciik1ft0o0000or7t7rflkwnt","tag_id":"ciik1ft0u0001or7tz10vh9l5","_id":"ciik1ft0w0002or7tpnqt2nqg"},{"post_id":"ciik1ft110003or7t1641qpxb","tag_id":"ciik1ft120004or7t76xbapmm","_id":"ciik1ft120005or7ttdyb8hnh"}],"Tag":[{"name":"mongo","_id":"ciik1ft0u0001or7tz10vh9l5"},{"name":"hexo","_id":"ciik1ft120004or7t76xbapmm"}]}}