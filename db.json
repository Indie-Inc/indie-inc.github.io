{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/casper/source/js/jquery.fitvids.js","path":"js/jquery.fitvids.js","modified":0},{"_id":"themes/casper/source/js/index.js","path":"js/index.js","modified":0},{"_id":"themes/casper/source/fonts/icons.woff","path":"fonts/icons.woff","modified":0},{"_id":"themes/casper/source/fonts/icons.ttf","path":"fonts/icons.ttf","modified":0},{"_id":"themes/casper/source/fonts/icons.svg","path":"fonts/icons.svg","modified":0},{"_id":"themes/casper/source/fonts/icons.eot","path":"fonts/icons.eot","modified":0},{"_id":"themes/casper/source/fonts/icons.dev.svg","path":"fonts/icons.dev.svg","modified":0},{"_id":"themes/casper/source/css/screen.css","path":"css/screen.css","modified":0},{"_id":"themes/casper/source/css/normalize.css","path":"css/normalize.css","modified":0}],"Cache":[{"_id":"source/_posts/Mongoose-validatorを使ってみる.md","shasum":"df43eafb46f6a8549620b0a4e8821b625c20b863","modified":1448190030000},{"_id":"source/_posts/how-to-setup.md","shasum":"aec119b55961205036c3418b59e71b28d9bd02f3","modified":1448161655000},{"_id":"themes/casper/LICENSE","shasum":"7bc66e9632b475079619f585722930b551c3c081","modified":1448158466000},{"_id":"themes/casper/README.md","shasum":"8a50fc48959d4fbe71643174cf4792a5db45bb0c","modified":1448158466000},{"_id":"themes/casper/_config.yml","shasum":"92915fc48c48f7fff522712b9baf8eff3a5b5837","modified":1448158466000},{"_id":"themes/casper/layout/archive.ejs","shasum":"eaf7e49f416afce6685e36a24a65a01bb3fe9ae7","modified":1448158466000},{"_id":"themes/casper/layout/casper/after_all.ejs","shasum":"e7cd492d5efe3186e22525d41176c5d5d6321e8c","modified":1448158466000},{"_id":"themes/casper/layout/casper/footer.ejs","shasum":"1ebcfcb2305d34f1aba4501c0e2c7cd08049f8db","modified":1448158466000},{"_id":"themes/casper/layout/casper/head.ejs","shasum":"88f7bcc882f2e5fae701af8940eaa7d476db0bb5","modified":1448158466000},{"_id":"themes/casper/layout/casper/header.ejs","shasum":"f103e0d38c6412d1c5c47100ea7fbebcc2f990c5","modified":1448158466000},{"_id":"themes/casper/layout/casper/index.ejs","shasum":"4dbc6044a87a0ccbad204e3c5719763d0bc4f440","modified":1448158466000},{"_id":"themes/casper/layout/casper/post/author.ejs","shasum":"d7eb9e85d3bd514cdc03100c4b91f088ad92b539","modified":1448158466000},{"_id":"themes/casper/layout/casper/post/comments.ejs","shasum":"66024ffeb7dcd21b6679c29ab4e78fb876d1d807","modified":1448158466000},{"_id":"themes/casper/layout/casper/post/meta.ejs","shasum":"c984cdc774bc884b33c8d87e3b59728cfdee773c","modified":1448158466000},{"_id":"themes/casper/layout/casper/post/navigation.ejs","shasum":"2ed662189bbc0d305147fdc12b9f120e57722ac5","modified":1448158466000},{"_id":"themes/casper/layout/casper/post/share.ejs","shasum":"1090719e3c49d4adadd7981eeff876b1c014d3e2","modified":1448158466000},{"_id":"themes/casper/layout/casper/post.ejs","shasum":"30c608f686a6ac462faa2964608c857b39e39fbf","modified":1448158466000},{"_id":"themes/casper/layout/category.ejs","shasum":"eaf7e49f416afce6685e36a24a65a01bb3fe9ae7","modified":1448158466000},{"_id":"themes/casper/layout/index.ejs","shasum":"eaf7e49f416afce6685e36a24a65a01bb3fe9ae7","modified":1448158466000},{"_id":"themes/casper/layout/layout.ejs","shasum":"e3c9598002a8c8bd991aa7f0373ff984b643044a","modified":1448158466000},{"_id":"themes/casper/layout/page.ejs","shasum":"13a176d843e7d44921e2705203011f0fcb46fcda","modified":1448158466000},{"_id":"themes/casper/layout/post.ejs","shasum":"13a176d843e7d44921e2705203011f0fcb46fcda","modified":1448158466000},{"_id":"themes/casper/layout/tag.ejs","shasum":"eaf7e49f416afce6685e36a24a65a01bb3fe9ae7","modified":1448158466000},{"_id":"themes/casper/source/css/normalize.css","shasum":"163c60d3a6c1f786754ba07426afbee0dfe82329","modified":1448158466000},{"_id":"themes/casper/source/fonts/icons.dev.svg","shasum":"193cbbeadd27a72dadb809aa7344df5b9d965d8d","modified":1448158466000},{"_id":"themes/casper/source/fonts/icons.eot","shasum":"d1abd4ac9fc6794570a73a5facaaf91492eed03c","modified":1448158466000},{"_id":"themes/casper/source/fonts/icons.svg","shasum":"e8deb79bc630c3aa21ccdca71f6f6a43ca8035c1","modified":1448158466000},{"_id":"themes/casper/source/fonts/icons.ttf","shasum":"e5247503ef56fd03361442ed082c8f9321e860b8","modified":1448158466000},{"_id":"themes/casper/source/fonts/icons.woff","shasum":"31dc8eba4c3c2c799996658b01a5926267ae6af6","modified":1448158466000},{"_id":"themes/casper/source/js/index.js","shasum":"a04c311b0818023c97446c79a8facdef067a04d1","modified":1448158466000},{"_id":"themes/casper/source/js/jquery.fitvids.js","shasum":"0d9ee59f102516b1a988490f27ed37440713cc8b","modified":1448158466000},{"_id":"themes/casper/source/css/screen.css","shasum":"54302910adb04c4d63b751a5878522ceeb67001a","modified":1448190161000},{"_id":"public/2015/11/22/Mongoose-validatorを使ってみる/index.html","modified":1448190224052,"shasum":"5d17bc54aa25a6b60c8e431c6de80bf76206c8ec"},{"_id":"public/2015/11/21/how-to-setup/index.html","modified":1448190224065,"shasum":"02bd16bf43dc0da31c075e2a5e2722e5f256edfb"},{"_id":"public/archives/index.html","modified":1448190224075,"shasum":"6c810d4618a0cd0ee62cdcd83bc30e167f01680c"},{"_id":"public/archives/2015/index.html","modified":1448190224082,"shasum":"85cd0f66da091cbdef63be3d5c02b7e91fca9e88"},{"_id":"public/archives/2015/11/index.html","modified":1448190224089,"shasum":"641151680c0d22cc6d7161ab6c185d462ad99dea"},{"_id":"public/index.html","modified":1448190224094,"shasum":"6e2041f6f64acd321d0e4cac2fe6be926e27d372"},{"_id":"public/tags/mongoDB/index.html","modified":1448190224100,"shasum":"81a9e279be9e4f1009dac8b7186460f72a4ea953"}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Mongooseで非同期Validation","date":"2015-11-22T07:15:30.000Z","_content":"\nこんばんはtejitakです。今日からIndie Incのエンジニアブログを書き始めます！w\n\n# Mongo DB Mongooseで非同期Validation\n\nMongoDBで定義したスキーマのデータを更新するときにvalidationを行うには以下のように行います。\n\n## 通常のvalidationを行う例\n\n``` js\n// schemaの定義と同時にvalidateを定義する場合\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema\n\nvar usernameLengthValidator = (value) => {\n  // 64文字以上はerror\n  return value.length < 64\n}\n\nvar User = new Schema({\n  \"username\": { type: String, default: '', validator: [{validator: usernameLengthValidator ,\n      message: '{VALUE} should be less than 64 characters!'}]}\n})\n\n// schemaの定義の後にvalidateを定義する場合\nUser.path('username').validate(usernameValidator, '{VALUE} should be less than 64 characters!')\n\n```\n\n通常は上記のような方法でvalidateすれば良いのですが、例えばtwitterのuserIdのようなものを想定してみてください。\n\nUserエントリをデータベースに更新する前に、重複IDが存在するかをDBの中から検索する必要があります。\n\nmongooseのfindのAPIは非同期のものしか提供されていないため、validationも非同期に行う必要があります。\n\n非同期validationは以下のコードのようにvalidateの関数の引数にcallbackを足して、処理の終了時にそれを呼んであげれば実現できます。\n\n## 非同期にvalidationを行う例\n``` js\n\n// callbackを引数に定義し、非同期処理が完了したタイミングでsuccessならtrue, failならfalseをcallbackに渡して実行する\nvar asyncValidator = (value, callback) => {\n  // Userデータの中に同じusernameが存在するかどうかをcount queryで判別する\n  return mongoose.model('User').where({'username': value}).count((err, count) => {\n    callback(count === 0, 'The username is already token!')\n  })\n}\n\nvar User = new Schema({\n  \"username\": { type: String, default: '', validator: [\n    {validator: usernameLengthValidator, message: '{VALUE} should be less than 64 characters!'},\n    {validator: asyncValidator , message: ''}\n  ]}\n})\n```\n\nこんな感じで実装できました。\n\n後で探してみると [mongoose-unique-validator](https://www.npmjs.com/package/mongoose-unique-validator) というツールもありました。このライブラリはmongooseのpluginを使って、上記と同様の countクエリーを発行しているようです。\n\n以上mongoDBに関するTips初投稿でした。\nこんな感じで些細なTipsなどを共有していこうかなと思っています。\n\nよろしくお願いします！\n","source":"_posts/Mongoose-validatorを使ってみる.md","raw":"title: Mongooseで非同期Validation\ndate: 2015-11-22 16:15:30\ntags: mongoDB\n---\n\nこんばんはtejitakです。今日からIndie Incのエンジニアブログを書き始めます！w\n\n# Mongo DB Mongooseで非同期Validation\n\nMongoDBで定義したスキーマのデータを更新するときにvalidationを行うには以下のように行います。\n\n## 通常のvalidationを行う例\n\n``` js\n// schemaの定義と同時にvalidateを定義する場合\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema\n\nvar usernameLengthValidator = (value) => {\n  // 64文字以上はerror\n  return value.length < 64\n}\n\nvar User = new Schema({\n  \"username\": { type: String, default: '', validator: [{validator: usernameLengthValidator ,\n      message: '{VALUE} should be less than 64 characters!'}]}\n})\n\n// schemaの定義の後にvalidateを定義する場合\nUser.path('username').validate(usernameValidator, '{VALUE} should be less than 64 characters!')\n\n```\n\n通常は上記のような方法でvalidateすれば良いのですが、例えばtwitterのuserIdのようなものを想定してみてください。\n\nUserエントリをデータベースに更新する前に、重複IDが存在するかをDBの中から検索する必要があります。\n\nmongooseのfindのAPIは非同期のものしか提供されていないため、validationも非同期に行う必要があります。\n\n非同期validationは以下のコードのようにvalidateの関数の引数にcallbackを足して、処理の終了時にそれを呼んであげれば実現できます。\n\n## 非同期にvalidationを行う例\n``` js\n\n// callbackを引数に定義し、非同期処理が完了したタイミングでsuccessならtrue, failならfalseをcallbackに渡して実行する\nvar asyncValidator = (value, callback) => {\n  // Userデータの中に同じusernameが存在するかどうかをcount queryで判別する\n  return mongoose.model('User').where({'username': value}).count((err, count) => {\n    callback(count === 0, 'The username is already token!')\n  })\n}\n\nvar User = new Schema({\n  \"username\": { type: String, default: '', validator: [\n    {validator: usernameLengthValidator, message: '{VALUE} should be less than 64 characters!'},\n    {validator: asyncValidator , message: ''}\n  ]}\n})\n```\n\nこんな感じで実装できました。\n\n後で探してみると [mongoose-unique-validator](https://www.npmjs.com/package/mongoose-unique-validator) というツールもありました。このライブラリはmongooseのpluginを使って、上記と同様の countクエリーを発行しているようです。\n\n以上mongoDBに関するTips初投稿でした。\nこんな感じで些細なTipsなどを共有していこうかなと思っています。\n\nよろしくお願いします！\n","slug":"Mongoose-validatorを使ってみる","published":1,"updated":"2015-11-22T11:00:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cihaeyl9j0000mflmq4fabtsq"},{"title":"How to Setup Hexo","date":"2015-11-21T14:26:55.000Z","_content":"\n### Installation\nPrerequisite: Node\n\n``` bash\n$ npm install -g hexo\n```\n\n### Setup Repository\n``` bash\n$ git clone https://github.com/Indie-Inc/indie-inc.github.io.git\n$ cd Indie-Inc.github.io.git\n$ npm install\n```\n\n### Write a Post\n\n``` bash\n$ hexo new “your xxxxx title\"\n```\n\nEdit the post in source/_posts/your-xxxxx-title.md\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Check on Local Hexo Server\n``` bash\n$ hexo server\n```\nAccess to [http://localhost:4000/](http://localhost:4000/)\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Deploy the Post\nDeploy with generating static files\n``` bash\n$ hexo deploy -g\n```\nMore info: [Generating](http://hexo.io/docs/generating.html), [Deployment](http://hexo.io/docs/deployment.html)\n\n### Push the Posts to Repository\n``` bash\n$ git push origin hexo\n```","source":"_posts/how-to-setup.md","raw":"title: How to Setup Hexo\ndate: 2015-11-21 23:26:55\ntags:\n---\n\n### Installation\nPrerequisite: Node\n\n``` bash\n$ npm install -g hexo\n```\n\n### Setup Repository\n``` bash\n$ git clone https://github.com/Indie-Inc/indie-inc.github.io.git\n$ cd Indie-Inc.github.io.git\n$ npm install\n```\n\n### Write a Post\n\n``` bash\n$ hexo new “your xxxxx title\"\n```\n\nEdit the post in source/_posts/your-xxxxx-title.md\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Check on Local Hexo Server\n``` bash\n$ hexo server\n```\nAccess to [http://localhost:4000/](http://localhost:4000/)\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Deploy the Post\nDeploy with generating static files\n``` bash\n$ hexo deploy -g\n```\nMore info: [Generating](http://hexo.io/docs/generating.html), [Deployment](http://hexo.io/docs/deployment.html)\n\n### Push the Posts to Repository\n``` bash\n$ git push origin hexo\n```","slug":"how-to-setup","published":1,"updated":"2015-11-22T03:07:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cihaeyl9y0003mflm0m5obdex"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cihaeyl9j0000mflmq4fabtsq","tag_id":"cihaeyl9p0001mflmpz2vy5qu","_id":"cihaeyl9s0002mflma97uocau"}],"Tag":[{"name":"mongoDB","_id":"cihaeyl9p0001mflmpz2vy5qu"}]}}